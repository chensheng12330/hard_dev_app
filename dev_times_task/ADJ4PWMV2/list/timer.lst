C51 COMPILER V9.00   TIMER                                                                 05/12/2019 21:44:21 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE timer.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\timer.lst) OBJECT(.\list\tim
                    -er.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          /*************  功能说明        **************
  15          
  16          本文件为STC15xxx系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  17          
  18          
  19          ******************************************/
  20          
  21          
  22          
  23          #include        "timer.h"
  24          
  25          
  26          extern PWMInfoDef pwm1Info;
  27          extern PWMInfoDef pwm2Info;     //中间变量，用户请勿修改。
  28          
  29          
  30          /********************* Timer0中断函数************************/
  31          void timer0_int (void) interrupt TIMER0_VECTOR
  32          {
  33   1              if(P_PWM1_P35)
  34   1              {
  35   2                      TH0 =  (u8)(pwm1Info.pwm_low>> 8);      //如果是输出高电平，则装载低电平时间。
  36   2                      TL0 = (u8)pwm1Info.pwm_low;
  37   2              }
  38   1              else
  39   1              {
  40   2                      TH0 = (u8)(pwm1Info.pwm_high >> 8);     //如果是输出低电平，则装载高电平时间。
  41   2                      TL0 = (u8)pwm1Info.pwm_high;
  42   2              }
  43   1      }
  44          
  45          /********************* Timer1中断函数************************/
  46          void timer1_int (void) interrupt TIMER1_VECTOR
  47          {
  48   1      
  49   1      }
  50          
  51          /********************* Timer2中断函数************************/
  52          void timer2_int (void) interrupt TIMER2_VECTOR
  53          {
  54   1              if(P_PWM2_p30)
C51 COMPILER V9.00   TIMER                                                                 05/12/2019 21:44:21 PAGE 2   

  55   1              {
  56   2                      TH2 =  (u8)(pwm2Info.pwm_low>> 8);      //如果是输出高电平，则装载低电平时间。
  57   2                      TL2 = (u8)pwm2Info.pwm_low;
  58   2              }
  59   1              else
  60   1              {
  61   2                      TH2 = (u8)(pwm2Info.pwm_high >> 8);     //如果是输出低电平，则装载高电平时间。
  62   2                      TL2 = (u8)pwm2Info.pwm_high;
  63   2              }
  64   1      }
  65          
  66          
  67          //========================================================================
  68          // 函数: u8     Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  69          // 描述: 定时器初始化程序.
  70          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  71          // 返回: 成功返回0, 空操作返回1,错误返回2.
  72          // 版本: V1.0, 2012-10-22
  73          //========================================================================
  74          u8      Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  75          {
  76   1              if(TIM > Timer2)        return 1;       //空操作
  77   1      
  78   1              if(TIM == Timer0)
  79   1              {
  80   2                      TR0 = 0;                //停止计数
  81   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET0 = 1;        //允许中断
  82   2                      else                                                                    ET0 = 0;        //禁止中断
  83   2                      if(TIMx->TIM_Polity == PolityHigh)              PT0 = 1;        //高优先级中断
  84   2                      else                                                                    PT0 = 0;        //低优先级中断
  85   2                      if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2;       //错误
  86   2                      TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  87   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x80;  //12T
  88   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x80;  //1T
  89   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x04;  //对外计数或分频
  90   2                      else                                                                            TMOD &= ~0x04;  //定时
  91   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;      //输出时钟
  92   2                      else                                                    INT_CLKO &= ~0x01;      //不输出时钟
  93   2                      
  94   2                      TH0 = (u8)(TIMx->TIM_Value >> 8);
  95   2                      TL0 = (u8)TIMx->TIM_Value;
  96   2                      if(TIMx->TIM_Run == ENABLE)     TR0 = 1;        //开始运行
  97   2                      return  0;              //成功
  98   2              }
  99   1      
 100   1              if(TIM == Timer1)
 101   1              {
 102   2                      TR1 = 0;                //停止计数
 103   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET1 = 1;        //允许中断
 104   2                      else                                                                    ET1 = 0;        //禁止中断
 105   2                      if(TIMx->TIM_Polity == PolityHigh)              PT1 = 1;        //高优先级中断
 106   2                      else                                                                    PT1 = 0;        //低优先级中断
 107   2                      if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2;       //错误
 108   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 109   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x40;  //12T
 110   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x40;  //1T
 111   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x40;  //对外计数或分频
 112   2                      else                                                                            TMOD &= ~0x40;  //定时
 113   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;      //输出时钟
 114   2                      else                                                    INT_CLKO &= ~0x02;      //不输出时钟
 115   2                      
C51 COMPILER V9.00   TIMER                                                                 05/12/2019 21:44:21 PAGE 3   

 116   2                      TH1 = (u8)(TIMx->TIM_Value >> 8);
 117   2                      TL1 = (u8)TIMx->TIM_Value;
 118   2                      if(TIMx->TIM_Run == ENABLE)     TR1 = 1;        //开始运行
 119   2                      return  0;              //成功
 120   2              }
 121   1      
 122   1              if(TIM == Timer2)               //Timer2,固定为16位自动重装, 中断无优先级
 123   1              {
 124   2                      AUXR &= ~(1<<4);        //停止计数
 125   2                      if(TIMx->TIM_Interrupt == ENABLE)                       IE2  |=  (1<<2);        //允许中断
 126   2                      else                                                                            IE2  &= ~(1<<2);        //禁止中断
 127   2                      if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)        return 2;
 128   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~(1<<2);        //12T
 129   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  (1<<2);        //1T
 130   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        AUXR |=  (1<<3);        //对外计数或分频
 131   2                      else                                                                            AUXR &= ~(1<<3);        //定时
 132   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;      //输出时钟
 133   2                      else                                                    INT_CLKO &= ~0x04;      //不输出时钟
 134   2      
 135   2                      TH2 = (u8)(TIMx->TIM_Value >> 8);
 136   2                      TL2 = (u8)TIMx->TIM_Value;
 137   2                      if(TIMx->TIM_Run == ENABLE)     AUXR |=  (1<<4);        //开始运行
 138   2                      return  0;              //成功
 139   2              }
 140   1              return 2;       //错误
 141   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    446    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
