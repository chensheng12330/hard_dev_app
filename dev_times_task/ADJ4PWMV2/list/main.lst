C51 COMPILER V9.00   MAIN                                                                  05/12/2019 23:58:35 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst) OBJECT(.\list\main.
                    -obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          #include        "config.h"
  15          #include        "timer.h"
  16          #include        "delay.h"
  17          #include        "soft_uart.h"
  18          #include        "pwm.h"
  19          //#include      <STDIO.H>
  20          
  21          /*************  功能说明        **************
  22          
  23          本程序演示使用定时器做软件PWM。
  24          
  25          定时器0做16位自动重装，中断，从T0CLKO高速输出PWM。
  26          
  27          本例程是使用STC15F/L系列MCU的定时器T0做模拟PWM的例程。
  28          
  29          PWM可以是任意的量程。但是由于软件重装需要一点时间，所以PWM占空比最小为32T/周期，最大为(周期-32T)/周期, T为
             -时钟周期。
  30          
  31          PWM频率为周期的倒数。假如周期为6000, 使用24MHZ的主频，则PWM频率为4000HZ。
  32                                                                    183
  33          ******************************************/
  34          
  35          /*************  本地常量声明    **************/
  36          
  37          #define         PWM_DUTY                10              //定义PWM占空比 
  38          #define     PWM_CYCLE       100 //定义PWM的周期，数值为时钟周期数，假如使用24.576MHZ的主频，则PWM频率为600
             -0HZ。
  39          
  40          #define         PWM_HIGH_MIN    32                              //限制PWM输出的最小占空比。用户请勿修改。
  41          #define         PWM_HIGH_MAX    (PWM_DUTY-PWM_HIGH_MIN) //限制PWM输出的最大占空比。用户请勿修改。
  42          
  43          
  44          /*************  本地变量声明    **************/
  45          
  46          
  47          
  48          
  49          
  50          PWMInfoDef  pwm1Info={0}; //1路pwm
  51          PWMInfoDef  pwm2Info={0}; //2路pwm                 
  52          
C51 COMPILER V9.00   MAIN                                                                  05/12/2019 23:58:35 PAGE 2   

  53          //u16           PWM_high,PWM_low;       //中间变量，用户请勿修改。
  54          //u16           pwm;                            //定义PWM输出高电平的时间的变量。用户操作PWM的变量。
  55          
  56          
  57          
  58          /*************  本地函数声明    **************/
  59          
  60          
  61          
  62          /*************  外部函数和变量声明 *****************/
  63          
  64          
  65          
  66          /************************ 定时器配置 ****************************/
  67          void    Timer_config(void)
  68          {
  69   1              //time0
  70   1              TIM_InitTypeDef         TIM_InitStructure;                                      //结构定义
  71   1              TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  72   1              TIM_InitStructure.TIM_Polity    = PolityHigh;                   //指定中断优先级, PolityHigh,PolityLow
  73   1              TIM_InitStructure.TIM_Interrupt = ENABLE;                               //中断是否允许,   ENABLE或DISABLE
  74   1              TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;                 //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_
             -Ext
  75   1              TIM_InitStructure.TIM_ClkOut    = ENABLE;                               //是否输出高速脉冲, ENABLE或DISABLE
  76   1              TIM_InitStructure.TIM_Value     = 65536UL - PWM_HIGH_MIN;       //初值,
  77   1              TIM_InitStructure.TIM_Run       = ENABLE;                               //是否初始化后启动定时器, ENABLE或DISABLE
  78   1              Timer_Inilize(Timer0,&TIM_InitStructure);                               //初始化Timer0    Timer0,Timer1,Timer2
  79   1      
  80   1              //time2
  81   1              Timer_Inilize(Timer2,&TIM_InitStructure);
  82   1              
  83   1      }
  84          
  85          
  86          
  87          /**************** 计算PWM重装值函数 ******************
  88          //pwm = PWM_DUTY / 10;  //给PWM一个初值，这里为10%占空比
  89          //LoadPWM(pwm); 
  90          void LoadPWM(u16 i)
  91          {
  92                  u16     j;
  93          
  94                  if(i > PWM_HIGH_MAX)            i = PWM_HIGH_MAX;       //如果写入大于最大占空比数据，则强制为最大占空比。
  95                  if(i < PWM_HIGH_MIN)            i = PWM_HIGH_MIN;       //如果写入小于最小占空比数据，则强制为最小占空比。
  96                  j = 65536UL - PWM_DUTY + i;     //计算PWM低电平时间
  97                  i = 65536UL - i;                        //计算PWM高电平时间
  98                  EA = 0;
  99                  PWM_high = i;   //装载PWM高电平时间
 100                  PWM_low  = j;   //装载PWM低电平时间
 101                  EA = 1;
 102          }
 103          */
 104          
 105          
 106          void PWM_Load(PWMInfoDef *pwmDef)
 107          {
 108   1              u16 tempPwm = pwmDef->pwm_cycle / pwmDef->pwm_duty;
 109   1              u16 lowTime,higTime;
 110   1              
 111   1              lowTime = 65536UL - pwmDef->pwm_cycle + tempPwm;        //计算PWM低电平时间;
 112   1              higTime = 65536UL - tempPwm; //计算PWM高电平时间
C51 COMPILER V9.00   MAIN                                                                  05/12/2019 23:58:35 PAGE 3   

 113   1      
 114   1              //if(i > PWM_HIGH_MAX)          i = PWM_HIGH_MAX;       //如果写入大于最大占空比数据，则强制为最大占空比。
 115   1              //if(i < PWM_HIGH_MIN)          i = PWM_HIGH_MIN;       //如果写入小于最小占空比数据，则强制为最小占空比。
 116   1              
 117   1              EA = 0;
 118   1              pwmDef->pwm_high= higTime;      //装载PWM高电平时间
 119   1              pwmDef->pwm_low = lowTime;      //装载PWM低电平时间
 120   1              EA = 1;
 121   1      }
 122          
 123          
 124          void PWM_config(void) {
 125   1              //pwm = PWM_DUTY / 10;  //给PWM一个初值，这里为10%占空比
 126   1              pwm1Info.pwm_duty = PWM_DUTY;
 127   1              pwm1Info.pwm_cycle= PWM_CYCLE;
 128   1              PWM_Load(&pwm1Info);
 129   1              
 130   1              pwm2Info.pwm_duty = PWM_DUTY+10;
 131   1              pwm2Info.pwm_cycle= PWM_CYCLE+5000;
 132   1              PWM_Load(&pwm2Info);
 133   1      }
 134          
 135          /******************** 主函数**************************/
 136          void main(void)
 137          {
 138   1              P_PWM1_P35 = 0;
 139   1              P_PWM2_p30 = 0;
 140   1              P3M1 &= ~(1 << 5);      //P3.5 设置为推挽输出
 141   1              P3M0 |=  (1 << 5);
 142   1      
 143   1              P3M1 &= ~(1 << 0);      //P3.0 设置为推挽输出
 144   1              P3M0 |=  (1 << 0);
 145   1      
 146   1              Timer_config();
 147   1              //EA = 1;
 148   1              P35 = 0;        //对于STC15W408S系列，要输出低，或者设置成推挽或OD，否则不正常
 149   1              P30 = 0;          //P_PWM2_p30
 150   1      
 151   1              //pwm = PWM_DUTY / 10;  //给PWM一个初值，这里为10%占空比
 152   1              //LoadPWM(pwm);                 //计算PWM重装值
 153   1      
 154   1              PWM_config();
 155   1              
 156   1      
 157   1      
 158   1              
 159   1              while (1)
 160   1              {
 161   2                      /*
 162   2                      while(pwm < (PWM_HIGH_MAX-8))
 163   2                      {
 164   2                              pwm += 8;               //PWM逐渐加到最大
 165   2                              LoadPWM(pwm);
 166   2                              delay_ms(8);
 167   2                      }
 168   2                      while(pwm > (PWM_HIGH_MIN+8))
 169   2                      {
 170   2                              pwm -= 8;       //PWM逐渐减到最小
 171   2                              LoadPWM(pwm);
 172   2                              delay_ms(8);
 173   2                      }
 174   2                      */
C51 COMPILER V9.00   MAIN                                                                  05/12/2019 23:58:35 PAGE 4   

 175   2                      //const char *fm =       "%d";
 176   2                      //sprintf();
 177   2      
 178   2                      //(pw1,fm,112);
 179   2                      
 180   2              //sprintf(pw1,"p1 H:%d L:%d",pwm1Info.pwm_high,pwm1Info.pwm_low);
 181   2              //sprintf(pw2,"p2 H:%d L:%d",pwm2Info.pwm_high,pwm2Info.pwm_low);
 182   2              //PrintString(pw1);
 183   2              //PrintString(pw2);
 184   2              //PrintString("12345");
 185   2              //TxSend('8');
 186   2      
 187   2              }
 188   1      }
 189          
 190          
 191          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    183    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
