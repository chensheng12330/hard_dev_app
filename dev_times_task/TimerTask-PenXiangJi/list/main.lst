C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          //#include "reg51.h"
  14          #include        "config.h"
  15          #include        "timer.h"
  16          #include        "GPIO.h"
  17          #include        "soft_uart.h"
  18          #include        "delay.h"
  19          #include        "Exti.h"
  20          
  21          
  22          /*************  ¹¦ÄÜËµÃ÷        **************
  23          
  24          ¸Ä×°[×Ô¶¯ÅçÏã»ú]
  25          
  26          1¡¢Ò»ÌìÅçÊ±¼äÉèÖÃÎª£º7µã£¬13µã£¬19µã
  27          2¡¢
  28          T(io) °´¼üÓÃÓÚÃ¿Ìì12µã½Ï×¼Ê±¼ä£¬´¥·¢¼´Éè¶¨µ±Ç°Ê ±¼äÎª12µã.
  29          M ÓÃÓÚÖ÷¶¯´¥·¢ÅçÏã»úÔËÐÐÒ»´Î¡£
  30          S  ¹Ø±Õµ±³ÌÐòÔËÐÐ.
  31          
  32          3¡¢L1(ÂÌio0)ÏÔÊ¾µ±Ç°×´Ì¬£¬
  33          10ÃëÉÁÒ»´Î£¬±íÊ¾»úÆ÷¶¨Ê±ÔËÐÐÖÐ¡£
  34          ³£ÁÁ±íÊ¾µç³Ø²»×ã¡£
  35          
  36          L2(ºìio1)ÉÁÒ»´Î£¬±íÊ¾Ê±¼ä½Ï×¼Íê³É¡£
  37          L2(ºì)ÉÁ¶þ´Î£¬±íÊ¾¼ÆÊý»Ö¸´Íê³É¡£ 
  38          L2(ºì)ÉÁÈý´Î£¬±íÊ¾¹Ø±Õ¶¨Ê±
  39          
  40          /*stc15f104w Òý½Å°²ÅÅ
  41          *********************************************************
  42          µç»úµçÔ´  p3.4  -- ||--p3.3  ÅçÏã»ú°´¼ü¿ØÖÆÊäÈë
  43          ÕýµçÔ´       vcc    -- ||--p3.2  Ê±¼äÖØÖÃ°´¼ü¿ØÖÆÊäÈë
  44          µç»ú¿ª¹Ø  p3.5  -- ||--p3.1  ºìµÆ
  45          ¸ºµçÔ´        gnd  -- ||--p3.0  ÂÌµÆ
  46          *********************************************************
  47          
  48          */
  49          
  50          /******************************************/
  51          
  52          /*************  ±¾µØ³£Á¿ÉùÃ÷    **************/
  53          #define l2Num_TimeRest_1 1
  54          #define l2Num_MotoRun_2  2
  55          
C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 2   

  56          /*************  ±¾µØ±äÁ¿ÉùÃ÷    **************/
  57          u32 g_hour=0;  //Ê±
  58          u32 g_minute=0;//·Ö
  59          u32 g_second=0;//Ãë
  60          u32 g_millisecond=0;//ºÁÃë 
  61          #define  k_addNum 50; //50 //¶¨Ê±µþ¼ÓÊý
  62          
  63          u16 g_key_flag=0; //°´¼ü×´Ì¬,(1:°´ÏÂ  0:Î´°´ÏÂ)
  64          u8  g_key_time=0; //°´¼üÏìÓ¦ÊÂ¼þÊ±¼ä¼ÆÊ±Êý.Ä¬ÈÏÎª20·ÖÖÓ. µ¥Î»Îª·ÖÖÓ
  65          u8  g_light_on_time=1; //Ä¬ÈÏÎª20·ÖÖÓ. µ¥Î»Îª·ÖÖÓ
  66          
  67          
  68          sbit ioInKeyForTime = P3^2; //Ê±¼ä½Ï×¼°´¼üÊäÈë  int0
  69          //sbit ioInKeyForRun  = P3^3;//³ÌÐòÊÇ·ñÔËÐÐÊäÈë   int1
  70          sbit ioInKeyForMoto = P3^3;//ÅçÏã»ú´¥·¢ÔËÐÐÊäÈë  int1
  71          
  72          sbit ioOutForL1Green= P3^0;  //ÂÌµÆ£¬³ÌÐòÔËÐÐÖ¸Ê¾µÆ
  73          sbit ioOutForL2Red  = P3^1;  //ºìµÆ£¬°´¼üÏìÓ¦Ö¸Ê¾µÆ 
  74          sbit ioOutForMotoPower=P3^4;  //ÅçÏã»úµçÔ´¿ª¹ØIO¿Ú.
  75          sbit ioOutForMotoKey= P3^5;  //ÅçÏã»ú°´¼ü¿ª¹Ø¿ØÖÆIO¿Ú. 
  76          
  77          
  78          #define  k_moto_run_time 10; //50 //¶¨Ê±µþ¼ÓÊý
  79          u8 g_moto_run_time=0; //µç»úÆô¶¯ÔËÐÐºóµÄÊ±¼äÖµ
  80           
  81          typedef struct
  82          {
  83                  u8      sKeyForTime;  //ÖØÖÃÊ±¼ä¼ü×´Ì¬Öµ.  0: Î´°´ÏÂ  //1:ÒÑ°´ÏÂ
  84                  //u8    sKeyForRun;       //³ÌÐò¼ü×´Ì¬Öµ.  0: Î´°´ÏÂ  //1:ÒÑ°´ÏÂ
  85                  u8     sKeyForMoto;  //ÅçÏã»ú¼ü×´Ì¬Öµ.  0: Î´°´ÏÂ  //1:ÒÑ°´ÏÂ
  86          } KeyStateDef; //µ±Ç°³ÌÐò°´¼üµÄ×´Ì¬,Ä¬ÈÏÎª0 
  87          
  88          //È«¾Ö¶ÔÏó
  89          KeyStateDef  g_allKeyState={0,0};
  90          
  91          
  92          /*************  ±¾µØº¯ÊýÉùÃ÷    **************/
  93          
  94          void mintueAction(void);
  95          
  96          void secondAction(void);
  97          
  98          void printNowTime(void);
  99          
 100          void key_scan(void);
 101          
 102          void l2ShowWithNum(u8 num);
 103          
 104          void motoStart(void);
 105          /*************  Íâ²¿º¯ÊýºÍ±äÁ¿ÉùÃ÷ *****************/
 106          void    EXTI_config(void)
 107          {
 108   1              EXTI_InitTypeDef        EXTI_InitStructure;                                     //½á¹¹¶¨Òå
 109   1      
 110   1          //³õÊ¼»¯INT0
 111   1              EXTI_InitStructure.EXTI_Mode      = EXT_MODE_RiseFall;  //ÖÐ¶ÏÄ£Ê½,  EXT_MODE_RiseFall, EXT_MODE_Fall
 112   1              EXTI_InitStructure.EXTI_Polity    = PolityHigh;                 //ÖÐ¶ÏÓÅÏÈ¼¶,   PolityLow,PolityHigh
 113   1              EXTI_InitStructure.EXTI_Interrupt = ENABLE;                             //ÖÐ¶ÏÔÊÐí,     ENABLE»òDISABLE
 114   1              Ext_Inilize(EXT_INT0,&EXTI_InitStructure);      
 115   1          
 116   1          //³õÊ¼»¯INT1
 117   1              EXTI_InitStructure.EXTI_Mode      = EXT_MODE_Fall;      //ÖÐ¶ÏÄ£Ê½,     EXT_MODE_RiseFall, EXT_MODE_Fall
C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 3   

 118   1              EXTI_InitStructure.EXTI_Polity    = PolityLow;                  //ÖÐ¶ÏÓÅÏÈ¼¶,   PolityLow,PolityHigh
 119   1              EXTI_InitStructure.EXTI_Interrupt = ENABLE;                             //ÖÐ¶ÏÔÊÐí,     ENABLE»òDISABLE
 120   1              Ext_Inilize(EXT_INT1,&EXTI_InitStructure);                              //      EXT_INT0,EXT_INT1,EXT_INT2,EXT_INT3,EXT_INT4
 121   1      
 122   1      /*
 123   1          //³õÊ¼»¯INT3
 124   1              EXTI_InitStructure.EXTI_Mode      = EXT_MODE_Fall;      //ÖÐ¶ÏÄ£Ê½,     EXT_MODE_RiseFall, EXT_MODE_Fall
 125   1              EXTI_InitStructure.EXTI_Polity    = PolityLow;                  //ÖÐ¶ÏÓÅÏÈ¼¶,   PolityLow,PolityHigh
 126   1              EXTI_InitStructure.EXTI_Interrupt = ENABLE;                             //ÖÐ¶ÏÔÊÐí,     ENABLE»òDISABLE
 127   1              Ext_Inilize(EXT_INT3,&EXTI_InitStructure);
 128   1              */
 129   1      }
 130          
 131          
 132          
 133          /************************ IO¿ÚÅäÖÃ ****************************/
 134          void    GPIO_config(void)
 135          {
 136   1              GPIO_InitTypeDef        GPIO_InitStructure;                             //½á¹¹¶¨Òå
 137   1              GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1| GPIO_Pin_4|GPIO_Pin_5;       //Ö¸¶¨Òª³õÊ¼»¯µÄIO, 
 138   1              // GPIO_Pin_2 ~ GPIO_Pin_3, »ò²Ù×÷
 139   1              GPIO_InitStructure.Mode = GPIO_OUT_PP;                          //Ö¸¶¨IOµÄÊäÈë»òÊä³ö·½Ê½,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
 140   1              GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);                      //³õÊ¼»¯
 141   1      
 142   1      
 143   1              GPIO_InitStructure.Pin   = GPIO_Pin_2 |GPIO_Pin_3  ;    //Ö¸¶¨Òª³õÊ¼»¯µÄIO,
 144   1              GPIO_InitStructure.Mode = GPIO_PullUp;                          //Ö¸¶¨IOµÄÊäÈë»òÊä³ö·½Ê½,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
 145   1              GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);      
 146   1              
 147   1      }
 148          
 149          /************************ ¶¨Ê±Æ÷ÅäÖÃ ****************************/
 150          void    Timer_config(void)
 151          {
 152   1              TIM_InitTypeDef         TIM_InitStructure;                                      //½á¹¹¶¨Òå
 153   1              TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //Ö¸¶¨¹¤×÷Ä£Ê½,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
 154   1              TIM_InitStructure.TIM_Polity    = PolityHigh;                   //Ö¸¶¨ÖÐ¶ÏÓÅÏÈ¼¶, PolityHigh,PolityLow
 155   1              TIM_InitStructure.TIM_Interrupt = ENABLE;                               //ÖÐ¶ÏÊÇ·ñÔÊÐí,   ENABLE»òDISABLE
 156   1              TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_12T;                        //Ö¸¶¨Ê±ÖÓÔ´,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK
             -_Ext
 157   1              TIM_InitStructure.TIM_ClkOut    = DISABLE;                              //ÊÇ·ñÊä³ö¸ßËÙÂö³å, ENABLE»òDISABLE
 158   1              TIM_InitStructure.TIM_Value     = 65536UL - (50.0/1000.0 * MAIN_Fosc/12.0);             
 159   1              // //³õÖµ,50ºÁÃëÒ»´ÎÖÐ¶Ï.
 160   1              TIM_InitStructure.TIM_Run       = ENABLE;                               //ÊÇ·ñ³õÊ¼»¯ºóÆô¶¯¶¨Ê±Æ÷, ENABLE»òDISABLE
 161   1              Timer_Inilize(Timer0,&TIM_InitStructure);                               //³õÊ¼»¯Timer0    Timer0,Timer1,Timer2
 162   1      
 163   1      }
 164          
 165          
 166          /******************** Ö÷º¯Êý**************************/
 167          void main(void)
 168          {
 169   1              
 170   1              //io ½ÅÅäÖÃ
 171   1              GPIO_config();
 172   1      
 173   1          //È«¾Ö±äÁ¿³õÊ¹»¯
 174   1              // ¹¤×÷µÆ¿ªÊ¼
 175   1            ioOutForL1Green=ioInKeyForMoto=ioInKeyForTime=1; //key¼üÀ­¸ß
C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 4   

 176   1      
 177   1            //Êä³öio½ÅÏÈ¹Ø±Õ
 178   1            ioOutForL2Red =ioOutForMotoPower = 0;
 179   1      
 180   1             ioOutForMotoKey=1; //´¥·¢ÅçÏã»úµÄ°´¼ü¿ª¹Ø. µÍÎ»¿ª£¬¸ßÎ»¹Ø.
 181   1      
 182   1                 
 183   1              //g_allKeyState = {0,0,0};
 184   1      
 185   1      
 186   1              //¿ªÆôÒý½Åp32 p33µÄÍâ²¿ÖÐ¶Ï,ÏÂ½µÑØÖÐ¶Ï.
 187   1              EXTI_config();
 188   1          
 189   1              //¶¨Ê±Æ÷ÅäÖÃ 50ms Ò»´Î¶¨Ê±£¬¶¨Ê±Æ÷´¥·¢Ê±£¬cpu½øÈë»½ÐÑÊ±¶Î.
 190   1              Timer_config();
 191   1      
 192   1              EA = 1;
 193   1                       
 194   1              //PrintString("\r\n ¿ªÊ¼¹¤×÷ÁË... = ");
 195   1      
 196   1              while (1)
 197   1              {
 198   2                      key_scan();
 199   2      
 200   2                              /*
 201   2                      Ö´ÐÐÈÎÎñ¶¯×÷1
 202   2      
 203   2                      Ò»ÌìÅçÊ±¼äÉèÖÃÎª£º7µã£¬13µã£¬19µã
 204   2                      */
 205   2      
 206   2                      if( g_hour ==7 || g_hour ==13 || g_hour ==19 ) {
 207   3      
 208   3                             motoStart();
 209   3                                      
 210   3                      }
 211   2              }
 212   1      }
 213          
 214          /***ÄÚ²¿¹¦ÄÜº¯Êý***/
 215          
 216          // °´¼ü´¦Àí¹¦ÄÜ
 217          void key_scan(void) {
 218   1      
 219   1              if(g_allKeyState.sKeyForMoto == 1) {
 220   2                      //Çå¿ÕÔ­×´Ì¬
 221   2                      g_allKeyState.sKeyForMoto = 0;
 222   2      
 223   2                      //´¥·¢ÅçÏã»ú¹¤×÷
 224   2                      motoStart();
 225   2                        l2ShowWithNum(l2Num_MotoRun_2);
 226   2                      
 227   2              }
 228   1      /*
 229   1              if(g_allKeyState.sKeyForRun== 1) {
 230   1      
 231   1                      //Í£Ö¹APPÔËÐÐ
 232   1                      while(g_allKeyState.sKeyForRun){;};
 233   1                      
 234   1                      //Çå¿ÕÔ­×´Ì¬
 235   1                      //g_allKeyState.sKeyForRun = 0;
 236   1              }
 237   1      */
C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 5   

 238   1              if(g_allKeyState.sKeyForTime== 1) {
 239   2                      //Çå¿ÕÔ­×´Ì¬
 240   2                      g_allKeyState.sKeyForTime = 0;
 241   2      
 242   2                      //ÖØÖÃÊ±¼äÎª12µã.
 243   2                      g_hour = 12;
 244   2                      g_minute=g_second=g_millisecond =0;
 245   2      
 246   2              l2ShowWithNum(l2Num_TimeRest_1);
 247   2                      
 248   2              }       
 249   1      }
 250          
 251          //ÁÁµÆÏìÓ¦
 252          /*
 253          3¡¢L1(ÂÌio0)ÏÔÊ¾µ±Ç°×´Ì¬£¬
 254          10ÃëÉÁÒ»´Î£¬±íÊ¾»úÆ÷¶¨Ê±ÔËÐÐÖÐ¡£
 255          ³£ÁÁ±íÊ¾µç³Ø²»×ã¡£
 256          
 257          L2(ºìio1)ÉÁÒ»´Î£¬±íÊ¾Ê±¼ä½Ï×¼Íê³É¡£
 258          L2(ºì)ÉÁ¶þ´Î£¬±íÊ¾´¥·¢ÅçÏã»ú¹¤×÷¡£ 
 259          L2(ºì)ÉÁÈý´Î£¬±íÊ¾¹Ø±ÕAPPÔËÐÐ
 260          */ 
 261          
 262          void l2ShowWithNum(u8 num)
 263          {
 264   1              int i=0;
 265   1          PrintString("\r\n l2ShowWithNum. ");
 266   1                      
 267   1              for(i=0; i<num; i++)
 268   1              {
 269   2                      ioOutForL2Red = 0;
 270   2                      delay_ms(200);
 271   2                      ioOutForL2Red = 1;
 272   2              }       /**/
 273   1      }       
 274          
 275          /*µç»ú¿ØÖÆ
 276          
 277          1.´ò¿ªp34,      (10Ãë) ºó¹Ø±Õ(Ïàµ±ÓÚ¿ª¹ØµçÔ´)
 278          2.µÈ´ýÅçÏã»úÆô¶¯,Ô¼(1Ãë)ÖÓ,¼´8(k_moto_run_time-2)ÃëÊ±Æô¶¯²Ù×÷.
 279          3.´ò¿ªp35, 20us Ãë¹Ø±Õ(Ä£ËÆ°´¼ü)
 280          */
 281          void motoStart(void) {
 282   1          //ÉèÖÃµç»úÆô¶¯±êÖ¾Ê±¼äÖµ.
 283   1          g_moto_run_time = k_moto_run_time; 
 284   1          PrintString("\r\n motoStart. ");
 285   1      }
 286          
 287          void secondAction(void) {
 288   1              //PrintString("\r\n secondAction... ");
 289   1              printNowTime();
 290   1          
 291   1              if(g_second%10 == 0){   //¹¤×÷Ö¸Ê¾µÆ(ÂÌ)
 292   2                      ioOutForL1Green = 1;
 293   2                      //delay_ms(200);
 294   2                      
 295   2              }
 296   1          else {
 297   2                  ioOutForL1Green = 0;
 298   2              }
 299   1      
C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 6   

 300   1      
 301   1              if(g_moto_run_time==0){
 302   2                      return;
 303   2              }
 304   1              else if(g_moto_run_time==8){
 305   2                      g_moto_run_time--;
 306   2                      //Æô¶¯µç»ú°´¼ü
 307   2                      ioOutForMotoKey=0;  //´ò¿ª
 308   2                     delay_ms(20);
 309   2                     ioOutForMotoKey=1; //¹Ø±Õ
 310   2                      
 311   2               }
 312   1              else if(g_moto_run_time==1){
 313   2                      g_moto_run_time=0;
 314   2      
 315   2                      //¹Ø±Õµç»úµçÔ´
 316   2                       ioOutForMotoPower= 0;
 317   2                  }
 318   1              else if(g_moto_run_time>0){
 319   2                      g_moto_run_time--;
 320   2                  }
 321   1              
 322   1              
 323   1      }
 324          
 325          void mintueAction(void) {
 326   1              //PrintString("\r\n mintueAction... ");
 327   1      
 328   1      }
 329          
 330          
 331          // TxSend(j/1000 + '0');
 332          void printNowTime(void) {
 333   1      
 334   1              //PrintString("\r\n ÏÖÔÚÊ±¼ä:");
 335   1      
 336   1              TxSend('H');
 337   1              //TxSend(g_hour+ '0');
 338   1              TxSend(g_hour%100/10 + '0');
 339   1              TxSend(g_hour%10+ '0');
 340   1              
 341   1      
 342   1              TxSend(' ');
 343   1              TxSend('M');
 344   1              TxSend(g_minute%100/10 + '0');
 345   1              TxSend(g_minute%10+ '0');
 346   1      
 347   1              TxSend(' ');
 348   1              TxSend('S');
 349   1              //TxSend(g_second+ '0');
 350   1              TxSend(g_second%100/10 + '0');
 351   1              TxSend(g_second%10+ '0');
 352   1      
 353   1      /*
 354   1              TxSend(' ');
 355   1              TxSend('U');
 356   1              //TxSend(g_millisecond+ '0');
 357   1              TxSend(g_millisecond%1000/100 + '0');
 358   1              TxSend(g_millisecond%100/10 + '0');
 359   1              TxSend(g_millisecond%10+ '0');
 360   1      */
 361   1              
C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 7   

 362   1              PrintString("\r\n ");
 363   1      }
 364          
 365          /********************* Timer0ÖÐ¶Ïº¯Êý************************/
 366          void timer0_int (void) interrupt TIMER0_VECTOR
 367          {
 368   1              g_millisecond += k_addNum;
 369   1      
 370   1              if( g_millisecond>= 1000) { //Âú×ãÒ»Ãë
 371   2                      g_millisecond = 0;
 372   2                      secondAction();
 373   2                      
 374   2                      g_second++;
 375   2      
 376   2                      if(g_second >=60){
 377   3      
 378   3                              //Âú×ãÒ»·ÖÖÓ
 379   3                              mintueAction();
 380   3      
 381   3                              
 382   3                              g_second =0;
 383   3                              g_minute ++;
 384   3      
 385   3                              if(g_minute >=60){
 386   4      
 387   4                                      //Âú×ãÒ»Ð¡Ê±
 388   4                                      g_minute =0;
 389   4                                      g_hour ++;
 390   4      
 391   4                                      if(g_hour >=24){
 392   5      
 393   5                                              //Âú×ã24Ð¡Ê±
 394   5                                              g_hour =0;
 395   5                              
 396   5                                      }
 397   4                              
 398   4                              }
 399   3                      }
 400   2              }
 401   1      }
 402          
 403          /*
 404          sbit ioInKeyForTime = P3^2; //Ê±¼ä½Ï×¼°´¼üÊäÈë  int0
 405          sbit ioInKeyForRun  = P3^3;//³ÌÐòÊÇ·ñÔËÐÐÊäÈë   int1
 406          sbit ioInKeyForMoto =P3^5;//ÅçÏã»ú´¥·¢ÔËÐÐÊäÈë  int3
 407          */
 408          
 409          /********************* INT0ÖÐ¶Ïº¯Êý *************************/
 410          void INT0_int (void) interrupt INT0_VECTOR              //½øÖÐ¶ÏÊ±ÒÑ¾­Çå³ý±êÖ¾
 411          {
 412   1              //WakeUpSource = 1;     //±ê¼ÇINT0»½ÐÑ
 413   1              //EX0 = 0;                      //INT0 Disable
 414   1              IE0  = 0;                       //ÍâÖÐ¶Ï0±êÖ¾Î»
 415   1          PrintString("\r\n Íâ²¿ÖÐ¶Ï0.");
 416   1      
 417   1              g_allKeyState.sKeyForTime= 1;
 418   1      }
 419          
 420          /********************* INT1ÖÐ¶Ïº¯Êý *************************/
 421          void INT1_int (void) interrupt INT1_VECTOR              //½øÖÐ¶ÏÊ±ÒÑ¾­Çå³ý±êÖ¾
 422          {
 423   1              //½øÈëÖÐ¶ÏÊ±£¬¿ÉÒÔ°Ñint1ÖÐ¶Ï¹Ø±Õ¡£
C51 COMPILER V9.01   MAIN                                                                  09/28/2018 18:12:45 PAGE 8   

 424   1              EX1 = 0;        
 425   1              //tfWakeUpSource = 2;   //±ê¼ÇINT1»½ÐÑ
 426   1              //EX1 = 0;                      //INT1 Disable
 427   1              IE1  = 0;                       //ÍâÖÐ¶Ï1±êÖ¾Î»
 428   1      
 429   1              //´¦ÀíÍêÖÐ¶ÏÊÂ¼þºó£¬¿ÉÒÔ°Ñ int1ÖÐ¶Ï¿ªÆô£¬·ÀÖ¹¶à´Î½øÈë¡£
 430   1      
 431   1          PrintString("\r\n Íâ²¿ÖÐ¶Ï1.ÑÓÊ±1Ãë");
 432   1          delay_ms(2000);
 433   1              EX1 = 1;         ;        //³ÌÐò¼ü×´Ì¬Öµ.  0: Î´°´ÏÂ  //1:ÒÑ°´ÏÂ
 434   1          
 435   1              g_allKeyState.sKeyForMoto= 1;
 436   1      }
 437          
 438          /********************* INT3ÖÐ¶Ïº¯Êý ***********************
 439          void INT3_int  (void) interrupt INT3_VECTOR
 440          {
 441              PrintString("\r\n Íâ²¿ÖÐ¶Ï3.ÑÓÊ±1Ãë");
 442          
 443          //
 444              INT_CLKO |=  (1 << 5);  //ÔÊÐíÖÐ¶Ï  
 445              INT_CLKO &= ~(1 << 5);  //½ûÖ¹ÖÐ¶Ï
 446          ///
 447                  //EX3 = 0;      
 448              //IE1  = 0; 
 449          
 450                  g_allKeyState.sKeyForMoto= 1;
 451          }
 452          */
 453          
 454          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1051    ----
   CONSTANT SIZE    =     73    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
