C51 COMPILER V9.01   MAIN                                                                  09/20/2018 18:08:20 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          //#include "reg51.h"
  14          #include        "config.h"
  15          #include        "timer.h"
  16          #include        "GPIO.h"
  17          #include        "soft_uart.h"
  18          #include        "delay.h"
  19          #include        "Exti.h"
  20          
  21          
  22          /*************  功能说明        **************
  23          
  24          改装[自动喷香机]
  25          
  26          1、一天喷时间设置为：7点，13点，19点
  27          2、
  28          T(io) 按键用于每天12点较准时间，触发即设定当前时间为12点.
  29          M 用于主动触发喷香机运行一次。
  30          S  关闭当程序运行.
  31          
  32          3、L1(绿io0)显示当前状态，
  33          10秒闪一次，表示机器定时运行中。
  34          常亮表示电池不足。
  35          
  36          L2(红io1)闪一次，表示时间较准完成。
  37          L2(红)闪二次，表示计数恢复完成。 
  38          L2(红)闪三次，表示关闭定时
  39          
  40          
  41          ******************************************/
  42          
  43          /*************  本地常量声明    **************/
  44          
  45          
  46          /*************  本地变量声明    **************/
  47          u32 g_hour=0;  //时
  48          u32 g_minute=0;//分
  49          u32 g_second=0;//秒
  50          u32 g_millisecond=0;//毫秒 
  51          u8  g_addNum = 50; //50 //定时叠加数
  52          
  53          u16 g_key_flag=0; //按键状态,(1:按下  0:未按下)
  54          u8  g_key_time=0; //按键响应事件时间计时数.默认为20分钟. 单位为分钟
  55          u8  g_light_on_time=1; //默认为20分钟. 单位为分钟
C51 COMPILER V9.01   MAIN                                                                  09/20/2018 18:08:20 PAGE 2   

  56          
  57          
  58          sbit ioInKeyForTime = P3^2; //时间较准按键输入
  59          sbit ioInKeyForRun  = P3^3;//程序是否运行输入 
  60          sbit ioInKeyForMoto =P3^5;//喷香机触发运行输入 
  61          
  62          sbit ioOutForL1Green= P3^0;  //绿灯，程序运行指示灯
  63          sbit ioOutForL2Red  = P3^1;  //红灯，按键响应指示灯
  64          sbit ioOutForMoto   = P3^4;  //喷香机驱动IO口.
  65          
  66          u8 ioSwitchLED=0;
  67          u8 ioWorkLED=0;
  68          u8 ioKEY=0;
  69          
  70          typedef struct
  71          {
  72                  u8      sKeyForTime;  //0: 未按下  //1:已按下
  73                  u8      sKeyForRun;      
  74              u8  sKeyForMoto;
  75          } KeyStateDef; //当前程序按键的状态,默认为0 
  76          
  77          //全局对象
  78          KeyStateDef  g_allKeyState={0,0,0};
  79          
  80          
  81          
  82          /*************  本地函数声明    **************/
  83          
  84          void mintueAction(void);
  85          
  86          void secondAction(void);
  87          
  88          void printNowTime(void);
  89          
  90          void key_scan(void);
  91          
  92          /*************  外部函数和变量声明 *****************/
  93          void    EXTI_config(void)
  94          {
  95   1              EXTI_InitTypeDef        EXTI_InitStructure;                                     //结构定义
  96   1      
  97   1          //初始化INT0
  98   1              EXTI_InitStructure.EXTI_Mode      = EXT_MODE_RiseFall;  //中断模式,  EXT_MODE_RiseFall, EXT_MODE_Fall
  99   1              EXTI_InitStructure.EXTI_Polity    = PolityHigh;                 //中断优先级,   PolityLow,PolityHigh
 100   1              EXTI_InitStructure.EXTI_Interrupt = ENABLE;                             //中断允许,     ENABLE或DISABLE
 101   1              Ext_Inilize(EXT_INT0,&EXTI_InitStructure);      
 102   1          
 103   1          //初始化INT1
 104   1              EXTI_InitStructure.EXTI_Mode      = EXT_MODE_RiseFall;  //中断模式,     EXT_MODE_RiseFall, EXT_MODE_Fall
 105   1              EXTI_InitStructure.EXTI_Polity    = PolityLow;                  //中断优先级,   PolityLow,PolityHigh
 106   1              EXTI_InitStructure.EXTI_Interrupt = ENABLE;                             //中断允许,     ENABLE或DISABLE
 107   1              Ext_Inilize(EXT_INT1,&EXTI_InitStructure);                              //      EXT_INT0,EXT_INT1,EXT_INT2,EXT_INT3,EXT_INT4
 108   1      
 109   1      }
 110          
 111          
 112          
 113          /************************ IO口配置 ****************************/
 114          void    GPIO_config(void)
 115          {
 116   1              GPIO_InitTypeDef        GPIO_InitStructure;                             //结构定义
 117   1              GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1| GPIO_Pin_5;  //指定要初始化的IO, 
C51 COMPILER V9.01   MAIN                                                                  09/20/2018 18:08:20 PAGE 3   

 118   1              // GPIO_Pin_2 ~ GPIO_Pin_3, 或操作
 119   1              GPIO_InitStructure.Mode = GPIO_OUT_PP;                          //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
 120   1              GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);                      //初始化
 121   1      
 122   1      
 123   1              GPIO_InitStructure.Pin   = GPIO_Pin_2 |GPIO_Pin_3 | GPIO_Pin_4 ;        //指定要初始化的IO,
 124   1              GPIO_InitStructure.Mode = GPIO_PullUp;                          //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
 125   1              GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);      
 126   1              
 127   1      }
 128          
 129          /************************ 定时器配置 ****************************/
 130          void    Timer_config(void)
 131          {
 132   1              TIM_InitTypeDef         TIM_InitStructure;                                      //结构定义
 133   1              TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
 134   1              TIM_InitStructure.TIM_Polity    = PolityHigh;                   //指定中断优先级, PolityHigh,PolityLow
 135   1              TIM_InitStructure.TIM_Interrupt = ENABLE;                               //中断是否允许,   ENABLE或DISABLE
 136   1              TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_12T;                        //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK
             -_Ext
 137   1              TIM_InitStructure.TIM_ClkOut    = DISABLE;                              //是否输出高速脉冲, ENABLE或DISABLE
 138   1              TIM_InitStructure.TIM_Value     = 65536UL - (50.0/1000.0 * MAIN_Fosc/12.0);             
 139   1              // //初值,50毫秒一次中断.
 140   1              TIM_InitStructure.TIM_Run       = ENABLE;                               //是否初始化后启动定时器, ENABLE或DISABLE
 141   1              Timer_Inilize(Timer0,&TIM_InitStructure);                               //初始化Timer0    Timer0,Timer1,Timer2
 142   1      
 143   1      }
 144          
 145          
 146          /******************** 主函数**************************/
 147          void main(void)
 148          {
 149   1              
 150   1              //io 脚配置
 151   1              GPIO_config();
 152   1      
 153   1          //全局变量初使化
 154   1              // 工作灯开始
 155   1            ioOutForL1Green=ioInKeyForMoto=ioInKeyForRun=ioInKeyForTime=1; //key键拉高
 156   1      
 157   1            //输出io脚先关闭
 158   1            ioOutForL2Red =ioOutForMoto = 0;
 159   1      
 160   1              //g_allKeyState = {0,0,0};
 161   1      
 162   1      
 163   1              //开启引脚p32 p33的外部中断,下降沿中断.
 164   1              EXTI_config();
 165   1          
 166   1              //定时器配置 50ms 一次定时，定时器触发时，cpu进入唤醒时段.
 167   1              Timer_config();
 168   1      
 169   1              EA = 1;
 170   1                       
 171   1              //PrintString("\r\n 开始工作了... = ");
 172   1      
 173   1              while (1)
 174   1              {
 175   2                      key_scan();
C51 COMPILER V9.01   MAIN                                                                  09/20/2018 18:08:20 PAGE 4   

 176   2      
 177   2                              /*
 178   2                      执行任务动作1
 179   2      
 180   2                      1,4,7,10,13,16,19,22 开始照明.
 181   2                      */
 182   2      
 183   2                      if( g_hour ==0 ||
 184   2                              g_hour ==4 ||
 185   2                              g_hour ==7 ||
 186   2                              g_hour ==10||
 187   2                              g_hour ==13||
 188   2                              g_hour ==16||
 189   2                              g_hour ==19||
 190   2                              g_hour ==22||
 191   2                              g_key_flag==1
 192   2                              ){
 193   3      
 194   3                              //持续亮灯20分钟.
 195   3                              if(g_minute<g_light_on_time || g_key_flag==1) {
 196   4      
 197   4                                      ioSwitchLED = 1;
 198   4                              }
 199   3                              else {
 200   4                                      ioSwitchLED = 0;
 201   4                              }
 202   3                      }
 203   2      
 204   2                      /*
 205   2                      执行任务动作1
 206   2      
 207   2                      工作灯,每10秒闪一次
 208   2                      */
 209   2                      if(g_second%10 == 0){
 210   3                              ioWorkLED = 1;
 211   3                              delay_ms(2000);
 212   3                              ioWorkLED = 0;
 213   3                      }
 214   2                      else {
 215   3                              //ioWorkLED = 0;
 216   3                              delay_ms(900);
 217   3                      }
 218   2      
 219   2                      //结束任务.
 220   2         
 221   2              }
 222   1      }
 223          
 224          
 225          void mintueAction(void) {
 226   1              //PrintString("\r\n mintueAction... ");
 227   1      
 228   1              if(g_key_time<1){
 229   2                      //复位.
 230   2                      g_key_flag =0; //用于控制亮灯
 231   2                      g_key_time =0; //重置按键亮灯计时时间
 232   2              }
 233   1              else{
 234   2                      g_key_flag =1; //用于控制亮灯
 235   2                      g_key_time--;
 236   2              }
 237   1      }
C51 COMPILER V9.01   MAIN                                                                  09/20/2018 18:08:20 PAGE 5   

 238          
 239          void secondAction(void) {
 240   1              //PrintString("\r\n secondAction... ");
 241   1              printNowTime();
 242   1      }
 243          
 244          // TxSend(j/1000 + '0');
 245          void printNowTime(void) {
 246   1      
 247   1              PrintString("\r\n 现在时间:");
 248   1      
 249   1              TxSend('H');
 250   1              //TxSend(g_hour+ '0');
 251   1              TxSend(g_hour%100/10 + '0');
 252   1              TxSend(g_hour%10+ '0');
 253   1              
 254   1      
 255   1              TxSend(' ');
 256   1              TxSend('M');
 257   1              TxSend(g_minute%100/10 + '0');
 258   1              TxSend(g_minute%10+ '0');
 259   1      
 260   1              TxSend(' ');
 261   1              TxSend('S');
 262   1              //TxSend(g_second+ '0');
 263   1              TxSend(g_second%100/10 + '0');
 264   1              TxSend(g_second%10+ '0');
 265   1      
 266   1      /*
 267   1              TxSend(' ');
 268   1              TxSend('U');
 269   1              //TxSend(g_millisecond+ '0');
 270   1              TxSend(g_millisecond%1000/100 + '0');
 271   1              TxSend(g_millisecond%100/10 + '0');
 272   1              TxSend(g_millisecond%10+ '0');
 273   1      */
 274   1              
 275   1              PrintString("\r\n ");
 276   1      }
 277          
 278          void key_scan(){
 279   1      
 280   1              if(ioKEY == 0)                
 281   1              //如果有键按下，则条件成立（有键按下，则s4为0；而 !key_flag为1）
 282   1          {
 283   2              delay_ms(10);//延时消抖
 284   2              if(ioKEY == 0)                             //如果确定有键按下
 285   2              {                      
 286   3                  //进行事件处理
 287   3                  g_key_flag = 1;
 288   3                  //启动亮灯计时
 289   3                  g_key_time=g_light_on_time;
 290   3      
 291   3                              PrintString("\r\n 按键已按下.");
 292   3                  return ;
 293   3              }
 294   2              }
 295   1              //g_key_flag = 0;
 296   1              return ;
 297   1      }
 298          
 299          
C51 COMPILER V9.01   MAIN                                                                  09/20/2018 18:08:20 PAGE 6   

 300          /********************* Timer0中断函数************************/
 301          void timer0_int (void) interrupt TIMER0_VECTOR
 302          {
 303   1              g_millisecond += g_addNum;
 304   1      
 305   1              if( g_millisecond>= 1000) { //满足一秒
 306   2                      g_millisecond = 0;
 307   2                      secondAction();
 308   2                      
 309   2                      g_second++;
 310   2      
 311   2                      if(g_second >=60){
 312   3      
 313   3                              //满足一分钟
 314   3                              mintueAction();
 315   3                              g_second =0;
 316   3                              g_minute ++;
 317   3      
 318   3                              if(g_minute >=60){
 319   4      
 320   4                                      //满足一小时
 321   4                                      g_minute =0;
 322   4                                      g_hour ++;
 323   4      
 324   4                                      if(g_hour >=24){
 325   5      
 326   5                                              //满足24小时
 327   5                                              g_hour =0;
 328   5                              
 329   5                                      }
 330   4                              
 331   4                              }
 332   3                      }
 333   2              }
 334   1      }
 335          
 336          
 337          
 338          /********************* INT0中断函数 *************************/
 339          void INT0_int (void) interrupt INT0_VECTOR              //进中断时已经清除标志
 340          {
 341   1              //WakeUpSource = 1;     //标记INT0唤醒
 342   1              EX0 = 0;                        //INT0 Disable
 343   1              IE0  = 0;                       //外中断0标志位
 344   1      
 345   1          PrintString("\r\n 外部中断0.");
 346   1      }
 347          
 348          /********************* INT1中断函数 *************************/
 349          void INT1_int (void) interrupt INT1_VECTOR              //进中断时已经清除标志
 350          {
 351   1              //tfWakeUpSource = 2;   //标记INT1唤醒
 352   1              EX1 = 0;                        //INT1 Disable
 353   1              IE1  = 0;                       //外中断1标志位
 354   1      
 355   1      
 356   1          PrintString("\r\n 外部中断1.");
 357   1      }
 358          
 359          


C51 COMPILER V9.01   MAIN                                                                  09/20/2018 18:08:20 PAGE 7   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1050    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
